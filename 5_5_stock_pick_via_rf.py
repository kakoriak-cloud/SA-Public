# -*- coding: utf-8 -*-
"""5 5 stock pick via RF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upIsiD-SPUE9_JoKIk6l09d2BLsrQPja
"""
import streamlit as st
import yfinance as yf
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import warnings

# Suppress verbose warnings
warnings.filterwarnings('ignore')

# Use st.cache_data to prevent re-running the analysis on every interaction
@st.cache_data
def get_predictions():
    """
    This function runs the entire stock analysis and prediction process.
    """
    # --- Helper Function to Get Tickers ---
    def get_nifty50_tickers():
        url = "https://en.wikipedia.org/wiki/NIFTY_50"
        tables = pd.read_html(url)
        constituents = tables[1] # Table index might change, 2 is often correct
        return [symbol + ".NS" for symbol in constituents['Symbol']]

    # --- Helper Function to Predict a Single Stock ---
    def predict_stock_price_rf(ticker):
        try:
            stock_data = yf.download(ticker, start="2020-01-01", progress=False)
            if len(stock_data) < 100:
                return None

            df = stock_data[['Close']].copy()
            df['lag_1'] = df['Close'].shift(1)
            df['ma_7'] = df['Close'].rolling(window=7).mean()
            df.dropna(inplace=True)

            y = df['Close']
            X = df.drop(columns=['Close'])

            model = RandomForestRegressor(n_estimators=100, random_state=42)
            model.fit(X, y)

            last_features = X.iloc[[-1]]
            predicted_price = model.predict(last_features)[0]

            last_known_price = stock_data['Close'].iloc[-1]
            growth_percent = ((predicted_price - last_known_price) / last_known_price) * 100
            return growth_percent
        except Exception:
            return None

    # --- Main Logic ---
    stock_list = get_nifty50_tickers()
    predictions = {}

    # Use a progress bar in the app
    progress_bar = st.progress(0)

    for i, ticker in enumerate(stock_list):
        growth = predict_stock_price_rf(ticker)
        if growth is not None:
            predictions[ticker] = float(growth) if isinstance(growth, (int, float)) else growth.iloc[0] if isinstance(growth, pd.Series) else none
        # Update the progress bar
        progress_bar.progress((i + 1) / len(stock_list))

    if not predictions:
        return [], []

    # Sort and return the results
    top_gainers = sorted(predictions.items(), key=lambda item: item[1], reverse=True)
    top_losers = sorted(predictions.items(), key=lambda item: item[1], reverse=False)

    return top_gainers[:5], top_losers[:5]


# --- App Title & Main Interface ---
st.title('📈 NIFTY 50 Stock Prediction App')
st.write("This app uses a Random Forest model to predict the next day's price movement for NIFTY 50 stocks. This is purely for AI education purpose, Not intended to provide any prediction suggestions")

# The button to trigger the analysis
if st.button('🚀 Get Today\'s Top 5 Predictions'):
    # Call the function to get the predictions
    gainers, losers = get_predictions()

    if gainers:
        st.subheader('🏆 Top 5 Predicted Gainers')
        gainer_df = pd.DataFrame(gainers, columns=['Ticker', 'Predicted Growth %'])
        st.dataframe(gainer_df, use_container_width=True)

        st.subheader('📉 Top 5 Predicted Losers')
        loser_df = pd.DataFrame(losers, columns=['Ticker', 'Predicted Reduction %'])
        st.dataframe(loser_df, use_container_width=True)
    else:
        st.error("Could not retrieve predictions. There might be an issue with the data source.")
